<?php

/**
 * @file
 * This is a short desc.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\yashaswi_exercise\Event\UserLoginEvent;

/**
 * This is the form alter func.
 */
function yashaswi_exercise_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Calling theservice.
  // Gets called whenever form is opened.
  // Calling service to call getName func from CustomService.php.
  $data = \Drupal::service('custom_service')->getName();

  if ($form_id == "node_article_edit_form") {
    $helptext = \Drupal::configFactory()->getEditable("custom_config_form.settings")->get("helptext");
    // type: node object.
    $node = \Drupal::routeMatch()->getParameter("node");
    $token_service = \Drupal::token();
    $hlptxt = $token_service->replace($helptext, ['node' => $node], ['clear' => TRUE]);
    $form['#prefix'] = "<span>" . $hlptxt . "</span>";
  }
}

/**
 * Implements hook_theme().
 */
function yashaswi_exercise_theme($existing, $type, $theme, $path) {

  return [
  // Name for the template file (html.twig)
    'controller_template' => [
  // Defined variables to be returned.
      'variables' => [
  // Can provide default value for markup here.
        'markup' => "",
  // Can prove default value for hexcode here.
        'hexcode' => "",
      ],
    ],
  ];

}

/**
 * Implements hook_user_login().
 */
function yashaswi_exercise_user_login($account) {
  // Instantiate our event.
  $event = new UserLoginEvent($account);
  // Triggering the event_dispatcher service and dispatch the event.
  $event_dispatcher = \Drupal::service('event_dispatcher');
  $event_dispatcher->dispatch($event, UserLoginEvent::EVENT_NAME);
}

/**
 * Attachments alter.
 */
function yashaswi_exercise_page_attachments_alter(array &$attachments) {
  $attachments['#attached']['library'][] = 'yashaswi_exercise/jss_lib';
  $attachments['#attached']['drupalSettings']['yashaswi_exercise']['color_body'] = "testing";

  // Calling the service.
  $route_match = \Drupal::routeMatch();
  // Getting the route name of the particular page.
  $route_name = $route_match->getRouteName();
  // print_r($route_name);exit;
  // If the route name is same.
  if ($route_name === 'comment.admin') {
    // Apply the css.
    $attachments['#attached']['library'][] = 'yashaswi_exercise/css_lib';
  }
  // If the route name matches.
  elseif ($route_name === 'entity.node.canonical') {
    // Apply the css.
    $attachments['#attached']['library'][] = 'yashaswi_exercise/css_lib';
  }
}

/**
 * Attachments alter.
 */
// Function yashaswi_exercise_page_attachments_alter(array &$attachments) {
//   $route_match = \Drupal::routeMatch();
//   $route_name = $route_match->getRouteName();
// $attachments['#attached']['library'][] = 'yashaswi_exercise/jss_lib';
// $attachments['#attached']['drupalSettings']['yashaswi_exercise']['color_body'] = "testing";
// }.

/**
 * Implements hook_entity_view().
 */
function yashaswi_exercise_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $session = \Drupal::request()->getSession();
  $counts = $session->get("yashaswi_exercise.node_view_count", []);
  if (!isset($counts[$entity->id()])) {
    $counts[$entity->id()] = 1;
  }
  else {
    $counts[$entity->id()]++;
  }

  $session->set("yashaswi_exercise.node_view_count", $counts);
  $build['count'] = [
    '#markup' => "Viewed " . $counts[$entity->id()] . " times",
    '#cache' => [
      'max-age' => 0,
    ],
  ];

}

/**
 * Entity view alter function.
 */
function yashaswi_exercise_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($entity->getEntityTypeId() == "node") {
    $build['field_tags']['#title'] = "view alter";
    unset($build['field_image']);
    $build['markup'] = [
      '#markup' => "<h2>Testing</h2>",
    ];
  }

}
